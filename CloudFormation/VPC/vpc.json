{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "VPC",

    "Parameters" : {
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
            "Type" : "String"
        },
        "DNSDomain" : {
            "Description" : "DNS domain",
            "Type" : "String"
        },
        "EnvironmentType" : {
            "Description" : "Chef environment type",
            "Type" : "String"
        },
        "EnvironmentName" : {
            "Description" : "DNS subdomain",
            "Type" : "String"
        },
        "USSOps" : {
            "Description" : "CIDR Address of USS",
            "Type" : "String"
        },
        "NetworkPrefix" : {
            "Description" : "CIDR Prefix for the VPC [x.x]",
            "Type" : "String"
        },
        "StackMask" : {
            "Description" : "CIDR Mask for the VPC [x.x]",
            "Type" : "String"
        },
        "SubnetMask" : {
            "Description" : "VPC Subnet Mask",
            "Type" : "String"
        },
        "ChefServer" : {
            "Description" : "Chef Server DNS Record",
            "Type" : "String"
        },
        "BaseAMI" : {
            "Description" : "Base AMI",
            "Type" : "String"
        },
        "ToolsVPC" : {
            "Description" : "Tools VPC For peering",
            "Type" : "String"
        },
        "BaseAMI" : {
            "Description" : "Base AMI",
            "Type" : "String"
        },
        "SourceBucket" : {
            "Description" : "Source Bucket",
            "Type" : "String"
        },
        "InstanceType" : {
            "Description" : "Instance Type",
            "Type" : "String"
        }
    },

    "Conditions": {
        "IsProduction": {
            "Fn::Equals": [{"Ref": "EnvironmentType"}, "production"]
        },
        "IsPreProduction": {
            "Fn::Equals": [{"Ref": "EnvironmentType"}, "preproduction"]
        },
        "IsTraining": {
            "Fn::Equals": [{"Ref": "EnvironmentType"}, "training"]
        },
        "IsDev": {
            "Fn::Equals": [{"Ref": "EnvironmentType"}, "dev"]
        }
    },

    "Resources":{
        "VPC":{
            "Type":"AWS::EC2::VPC",
            "Properties":{
                "CidrBlock": { "Fn::Join":[ "", [ { "Ref":"NetworkPrefix" }, ".0.0/", {"Ref" : "StackMask"}  ] ] },
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "Tags":[
                            { "Key": "Application", "Value":{ "Ref":"AWS::StackName" } }
                        ]
            }
        },
        "SubnetPublicA":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{ "Ref":"VPC" },
                "CidrBlock": { "Fn::Join":[ "", [ { "Ref":"NetworkPrefix" }, ".0.0/", {"Ref" : "SubnetMask"}  ] ] },
                "AvailabilityZone":{ "Fn::Select":[ "0", { "Fn::GetAZs":"" } ] },
                "Tags":[
                            { "Key":"Application", "Value":{ "Ref":"AWS::StackName" } },
                            { "Key":"Network", "Value":"PublicA" }
                        ]
            }
        },
        "SubnetPublicB":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{ "Ref":"VPC" },
                "CidrBlock": { "Fn::Join":[ "", [ { "Ref":"NetworkPrefix" }, ".1.0/", {"Ref" : "SubnetMask"}  ] ] },
                "AvailabilityZone":{ "Fn::Select":[ "1", { "Fn::GetAZs":"" } ] },
                "Tags":[
                            { "Key":"Application", "Value":{ "Ref":"AWS::StackName" } },
                            { "Key":"Network", "Value":"PublicB" }
                        ]
            }
        },
        "InternetGateway":{
            "Type":"AWS::EC2::InternetGateway",
            "Properties":{
                "Tags":[
                        { "Key":"Application", "Value":{ "Ref":"AWS::StackName" } },
                        { "Key":"Network", "Value":"Public" }
                ]
            }
        },
        "AttachGateway":{
            "Type":"AWS::EC2::VPCGatewayAttachment",
            "Properties":{
                "VpcId":{ "Ref":"VPC" },
                "InternetGatewayId":{ "Ref":"InternetGateway" }
            }
        },
        "DHCPOptionsAssociation" : {
            "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
                "Properties" : {
                        "VpcId" : {"Ref" : "VPC"},
                        "DhcpOptionsId" : {"Ref" : "DHCPOptionSet"}
                }
            },
        "DHCPOptionSet" : {
            "Type" : "AWS::EC2::DHCPOptions",
            "Properties" : {
                "DomainName" : { "Fn::Join":[ "", [ "int.", {"Ref" : "EnvironmentName"}, "." ,{ "Ref":"DNSDomain" }] ] },
                "DomainNameServers" : [ "AmazonProvidedDNS" ],
                "Tags" : [
                            { "Key" : "Application", "Value": { "Ref" : "AWS::StackName" } },
                            { "Key" : "Name", "Value": { "Ref" : "EnvironmentName" } }
                ]
            }
        },
        "RouteTablePublic":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{ "Ref":"VPC" },
                "Tags":[
                            { "Key":"Application", "Value":{ "Ref":"AWS::StackId" } }
                ]
            }
        },
        "RouteTablePrivateA": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                            {"Key": "Application", "Value": {"Ref": "AWS::StackId"}}
                ]
          }
        },
        "RouteTablePrivateB": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                            {"Key": "Application", "Value": {"Ref": "AWS::StackId"}}
                ]
          }
        },
        "RouteOutThroughNatA": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {"Ref": "RouteTablePrivateA"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {"Ref": "NatServerA"}
            }
        },
        "RouteOutThroughNatB": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {"Ref": "RouteTablePrivateB"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {"Ref": "NatServerB"}
            }
        },
        "RouteOutToInternet":{
            "Type":"AWS::EC2::Route",
            "DependsOn":"AttachGateway",
            "Properties":{
                "RouteTableId":{ "Ref":"RouteTablePublic" },
                "DestinationCidrBlock":"0.0.0.0/0",
                "GatewayId":{ "Ref":"InternetGateway" }
          }
        },
        "SubnetRouteTableAssociationPublicA":{
          "Type":"AWS::EC2::SubnetRouteTableAssociation",
          "Properties":{
            "SubnetId":{ "Ref":"SubnetPublicA" },
            "RouteTableId":{ "Ref":"RouteTablePublic" }
          }
        },
        "SubnetRouteTableAssociationPublicB":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{ "Ref":"SubnetPublicB" },
                "RouteTableId":{ "Ref":"RouteTablePublic" }
            }
        },
        "NetworkAcl":{
            "Type":"AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref":"VPC" },
                "Tags":[
                            { "Key":"Application", "Value":{ "Ref":"AWS::StackId" } }
                ]
            }
        },
        "InboundSSHNetworkAclEntry":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Properties":{
                "NetworkAclId": { "Ref":"NetworkAcl" },
                "RuleNumber":"100",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange": {
                    "From":"22",
                    "To":"22"
                }
            }
        },
        "InboundHTTPNetworkAclEntry":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Properties":{
                "NetworkAclId": { "Ref":"NetworkAcl" },
                "RuleNumber":"101",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange": {
                    "From":"80",
                    "To":"80"
                }
            }
        },
        "InboundHTTPSNetworkAclEntry":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Properties":{
                "NetworkAclId": { "Ref":"NetworkAcl" },
                "RuleNumber":"102",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange": {
                    "From":"443",
                    "To":"443"
                }
            }
        },
        "InboundSMTPNetworkAclEntry":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Properties":{
                "NetworkAclId": { "Ref":"NetworkAcl" },
                "RuleNumber":"103",
                "Protocol":"6",
                "RuleAction":"allow",
                "Egress":"false",
                "CidrBlock":"0.0.0.0/0",
                "PortRange": {
                    "From":"25",
                    "To":"25"
                }
            }
        },
        "InboundEphemeralPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {"Ref":"NetworkAcl"},
                "RuleNumber": "104",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            }
        },
        "OutboundNetworkAclEntry":{
            "Type":"AWS::EC2::NetworkAclEntry",
            "Properties":{
                "NetworkAclId": { "Ref":"NetworkAcl" },
                "RuleNumber":"105",
                "Protocol":"-1",
                "RuleAction":"allow",
                "Egress":"true",
                "CidrBlock":"0.0.0.0/0",
                "PortRange": {
                    "From":"1024",
                    "To":"65535"
                }
            }
        },
        "SubnetNetworkAclAssociationPublicA":{
            "Type":"AWS::EC2::SubnetNetworkAclAssociation",
            "Properties":{
                "SubnetId":{ "Ref":"SubnetPublicA" },
                "NetworkAclId":{ "Ref":"NetworkAcl" }
            }
        },
        "SubnetNetworkAclAssociationPublicB":{
            "Type":"AWS::EC2::SubnetNetworkAclAssociation",
            "Properties":{
                "SubnetId":{ "Ref":"SubnetPublicB" },
                "NetworkAclId":{ "Ref":"NetworkAcl" }
            }
        },
        "SecurityGroupBackplane":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "GroupDescription":"Backplane",
                "VpcId":{ "Ref":"VPC" },
                "SecurityGroupIngress":[
                    { "IpProtocol":"tcp", "FromPort":"22", "ToPort":"22", "CidrIp":  {"Fn::Join": ["", [{"Ref": "NetworkPrefix"}, ".0.0/", {"Ref": "SubnetMask"}]]} }
                ],
                "SecurityGroupEgress":[

                ]
            }
        },
        "SecurityGroupClient":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "GroupDescription":"Access Nat by USS Ops team",
                "VpcId":{ "Ref":"VPC" },
                "SecurityGroupIngress":[
                        { "IpProtocol":"tcp", "FromPort":"22", "ToPort":"22", "CidrIp":  { "Ref" : "USSOps"} }
                ],
                "SecurityGroupEgress":[

                ]
            }
        },
        "SecurityGroupInternalNat":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "GroupDescription":"Access Nat internally",
                "VpcId":{ "Ref":"VPC" },
                "SecurityGroupIngress":[
                    { "IpProtocol":"tcp", "FromPort":"1", "ToPort":"65535", "CidrIp": { "Fn::Join":[ "", [ { "Ref":"NetworkPrefix" }, ".0.0/", {"Ref" : "StackMask"}  ] ] }}
                ],
                "SecurityGroupEgress":[

                ]
            }
        },
        "Role":{
            "Type":"AWS::IAM::Role",
            "Properties":{
                "AssumeRolePolicyDocument":{
                    "Statement":[
                            {   "Effect":"Allow", "Principal":{ "Service":[ "ec2.amazonaws.com" ] }, "Action":[ "sts:AssumeRole" ] }
                    ]
                },
                "Path":"/",
                "Policies":[
                            {   "PolicyName":"read-only", "PolicyDocument":{ "Statement":[ { "Effect":"Allow", "Action": ["autoscaling:Describe*","ec2:Describe*","s3:Get*","s3:List*"], "Resource":"*" } ] }  }
                ]
            }
        },
        "InstanceProfile":{
            "Type":"AWS::IAM::InstanceProfile",
            "Properties":{
                "Path":"/",
                "Roles":[ { "Ref":"Role" } ]
            }
        },
        "NatIPAddressA":{
            "Type":"AWS::EC2::EIP",
            "Properties":{ "Domain":"vpc" }
        },
        "AssociationNatIPAddressA":{
            "Type":"AWS::EC2::EIPAssociation",
            "Properties":{
                "AllocationId":{ "Fn::GetAtt":[ "NatIPAddressA", "AllocationId" ] },
                "InstanceId": {"Ref" :"NatServerA"}
            }
        },
        "NatIPAddressB":{
            "Type":"AWS::EC2::EIP",
            "Properties":{ "Domain":"vpc" }
        },
        "AssociationNatIPAddressB":{
            "Type":"AWS::EC2::EIPAssociation",
            "Properties":{
                "AllocationId":{ "Fn::GetAtt":[ "NatIPAddressB", "AllocationId" ] },
                "InstanceId": {"Ref" :"NatServerB"}
            }
        },
        "NatServerA":{
                "Type" : "AWS::EC2::Instance",
                "Properties":{
                    "InstanceType": {"Ref" : "InstanceType"},
                    "IamInstanceProfile":{"Ref":"InstanceProfile"},
                    "ImageId" : { "Ref" : "BaseAMI"},
                    "KeyName":{"Ref":"KeyName"},
                    "SubnetId":{ "Ref":"SubnetPublicA" },
                    "SourceDestCheck":"False",
                    "SecurityGroupIds":[
                            { "Ref": "SecurityGroupClient"},
                            { "Ref":"SecurityGroupInternalNat" }
                    ],
                    "Tags":[
                            { "Key":"Name", "Value":{ "Fn::Join":[ "", [ "nat01-" , {"Ref":"EnvironmentName"} ] ] } }
                    ],
                    "UserData":{
                        "Fn::Base64":{
                            "Fn::Join":[
                                "",
                                [
                                    "#!/bin/bash\n",
                                    "hostname nat01.int.", { "Ref":"EnvironmentName" } ,".", {"Ref":"DNSDomain"},"\n",
                                    "sed '/HOSTNAME/d' /etc/sysconfig/network > /tmp/network && mv -f /tmp/network /etc/sysconfig/network && echo 'HOSTNAME=nat01.int.", { "Ref":"EnvironmentName" } ,".", {"Ref":"DNSDomain" }, "' >>/etc/sysconfig/network && /etc/init.d/network restart\n",
                                    "curl -L https://www.opscode.com/chef/install.sh | bash\n",
                                    "yum install -y iptables\n",
                                    "echo \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf\n",
                                    "sysctl -p\n",
                                    "iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n",
                                    "iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT\n",
                                    "iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT\n",
                                    "iptables-save > /etc/sysconfig/iptables\n",
                                    "/usr/bin/aws s3 --region ", { "Ref" : "AWS::Region" } ," cp s3://", { "Ref" : "SourceBucket" }, "/chef/client.rb /etc/chef/client.rb || error_exit \"Failed to download chef client config\"\n",
                                    "/usr/bin/aws s3 --region ", { "Ref" : "AWS::Region" } ," cp s3://", { "Ref" : "SourceBucket" }, "/chef/aws-validator.pem /etc/chef/aws-validator.pem || error_exit \"Failed to download chef client validation file\"\n",
                                    "chef-client -E ", { "Ref" : "EnvironmentType"} , " -o 'recipe[uss::nat_default]' -L /tmp/chef.out"
                                ]
                            ]
                        }
                    }
                }
        },
        "NatServerB":{
                "Type" : "AWS::EC2::Instance",
                "Properties":{
                    "InstanceType": {"Ref" : "InstanceType"},
                    "IamInstanceProfile":{"Ref":"InstanceProfile"},
                    "ImageId" : { "Ref" : "BaseAMI"},
                    "KeyName":{"Ref":"KeyName"},
                    "SubnetId":{ "Ref":"SubnetPublicB" },
                    "SourceDestCheck":"False",
                    "SecurityGroupIds":[
                        { "Ref": "SecurityGroupClient"},
                        { "Ref": "SecurityGroupInternalNat" }
                    ],
                    "Tags":[
                        { "Key":"Name", "Value":{ "Fn::Join":[ "", [ "nat02-" , {"Ref":"EnvironmentName"} ] ] } }
                    ],
                    "UserData":{
                            "Fn::Base64":{
                                "Fn::Join":[
                                    "",
                                    [
                                        "#!/bin/bash\n",
                                        "hostname nat02.int.", { "Ref":"EnvironmentName" } ,".", {"Ref":"DNSDomain"},"\n",
                                        "sed '/HOSTNAME/d' /etc/sysconfig/network > /tmp/network && mv -f /tmp/network /etc/sysconfig/network && echo 'HOSTNAME=nat02.int.", { "Ref":"EnvironmentName" } ,".", {"Ref":"DNSDomain" }, "' >>/etc/sysconfig/network && /etc/init.d/network restart\n",
                                        "yum install -y  iptables\n",
                                        "curl -L https://www.opscode.com/chef/install.sh | bash\n",
                                        "echo \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf\n",
                                        "sysctl -p\n",
                                        "iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n",
                                        "iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT\n",
                                        "iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT\n",
                                        "iptables-save > /etc/sysconfig/iptables\n",
                                        "/usr/bin/aws s3 --region ", { "Ref" : "AWS::Region" } ," cp s3://", { "Ref" : "SourceBucket" }, "/chef/client.rb /etc/chef/client.rb || error_exit \"Failed to download chef client config\"\n",
                                        "/usr/bin/aws s3 --region ", { "Ref" : "AWS::Region" } ," cp s3://", { "Ref" : "SourceBucket" }, "/chef/aws-validator.pem /etc/chef/aws-validator.pem || error_exit \"Failed to download chef client validation file\"\n",
                                        "chef-client -E ", { "Ref" : "EnvironmentType"} , " -o 'recipe[just::nat_default]' -L /tmp/chef.out"
                                    ]
                                ]
                            }
                    }
                }
        },
        "Nat01EXTHostRecord":{
            "Type":"AWS::Route53::RecordSet",
            "DependsOn":["NatServerA"],
            "Properties":{
                "HostedZoneName":{ "Fn::Join":[ "", [ {"Ref" : "EnvironmentName"},".", { "Ref":"DNSDomain" }, "." ] ]},
                "Comment":"DNS name for my instance.",
                "Name":{ "Fn::Join":[ "", [ "nat01.",{"Ref" : "EnvironmentName"}, "." ,{ "Ref":"DNSDomain" }, "." ] ] },
                "Type":"A",
                "TTL":"60",
                "ResourceRecords":[ { "Ref":"NatIPAddressA" } ]
            }
        },
        "Nat02EXTHostRecord":{
            "Type":"AWS::Route53::RecordSet",
            "DependsOn": ["NatServerB"],
            "Properties":{
                "HostedZoneName":{ "Fn::Join":[ "", [ {"Ref" : "EnvironmentName"},".", { "Ref":"DNSDomain" }, "." ] ]},
                "Comment":"DNS name for my instance.",
                "Name":{ "Fn::Join":[ "", [ "nat02.",{"Ref" : "EnvironmentName"}, "." ,{ "Ref":"DNSDomain" }, "." ] ] },
                "Type":"A",
                "TTL":"60",
                "ResourceRecords":[ { "Ref":"NatIPAddressB" } ]
            }
        },
        "Nat01INTHostRecord":{
            "Type":"AWS::Route53::RecordSet",
            "DependsOn": ["NatServerA"],
            "Properties":{
                "HostedZoneName":{ "Fn::Join":[ "", [ {"Ref" : "EnvironmentName"},".", { "Ref":"DNSDomain" }, "." ] ]},
                "Comment":"DNS name for my instance.",
                "Name":{ "Fn::Join":[ "", [ "nat01.int.",{"Ref" : "EnvironmentName"}, "." ,{ "Ref":"DNSDomain" }, "." ] ] },
                "Type":"A",
                "TTL":"60",
                "ResourceRecords":[ { "Fn::GetAtt":[ "NatServerA", "PrivateIp"]}]
            }
        },
        "Nat02INTHostRecord":{
            "Type":"AWS::Route53::RecordSet",
            "DependsOn":["NatServerB"],
            "Properties":{
                "HostedZoneName":{ "Fn::Join":[ "", [ {"Ref" : "EnvironmentName"},".", { "Ref":"DNSDomain" }, "." ] ]},
                "Comment":"DNS name for my instance.",
                "Name":{ "Fn::Join":[ "", [ "nat02.int.",{"Ref" : "EnvironmentName"}, "." ,{ "Ref":"DNSDomain" }, "." ] ] },
                "Type":"A",
                "TTL":"60",
                "ResourceRecords":[ { "Fn::GetAtt":[ "NatServerB", "PrivateIp"]}]
            }
        }
    },

    "Outputs":{
          "SubnetPublicA":{
              "Description":"SubnetId of the public subnet in AZa",
              "Value":{ "Ref":"SubnetPublicA" }
          },
          "SubnetPublicB":{
            "Description":"SubnetId of the public subnet in AZb",
            "Value":{ "Ref":"SubnetPublicB" }
          },
          "VPCId":{
            "Description":"VPCId of the newly created VPC",
            "Value":{ "Ref":"VPC" }
          },
          "NatServerA" : {
            "Description" : "Nat Server A Instance ID",
            "Value" : {"Ref" : "NatServerA"}
          },
          "NatServerB" : {
            "Description" : "Nat Server B Instance ID",
            "Value" : {"Ref" : "NatServerB"}
          },
          "InternetGateway" : {
            "Description" : "IGW",
            "Value" : {"Ref" : "InternetGateway"}
          },
          "RouteTablePublic" : {
            "Description" : "Route Table Public",
            "Value" : {"Ref" : "RouteTablePublic"}
          },
          "SecurityGroupBackplane" : {
            "Description" : "Security Group Backplane",
            "Value" : {"Ref" : "SecurityGroupBackplane"}
          },
          "RouteTablePrivateA" : {
            "Description" : "Route Table Private A",
            "Value" : {"Ref" : "RouteTablePrivateA"}
          },
          "RouteTablePrivateB" : {
            "Description" : "Route Table Private B",
            "Value" : {"Ref" : "RouteTablePrivateB"}
          }
    }

}
